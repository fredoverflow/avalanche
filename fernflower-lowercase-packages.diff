diff --git a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
index f9cd2af..d8cf1fa 100644
--- a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
+++ b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
@@ -50,7 +50,7 @@ public class ContextUnit {
   }
 
   public void addDirEntry(String entry) {
-    dirEntries.add(entry);
+    dirEntries.add(entry.toLowerCase());
   }
 
   public void addOtherEntry(String fullPath, String entry) {
diff --git a/src/org/jetbrains/java/decompiler/struct/StructContext.java b/src/org/jetbrains/java/decompiler/struct/StructContext.java
index 6d07096..8898c45 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructContext.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructContext.java
@@ -143,7 +143,7 @@ public class StructContext {
             byte[] bytes = InterpreterUtil.getBytes(archive, entry);
             StructClass cl = new StructClass(bytes, isOwn, loader);
             classes.put(cl.qualifiedName, cl);
-            unit.addClass(cl, name);
+            unit.addClass(cl, cl.qualifiedName + ".class");
             loader.addClassLink(cl.qualifiedName, new LazyLoader.Link(file.getAbsolutePath(), name));
           }
           else {
diff --git a/src/org/jetbrains/java/decompiler/struct/consts/ConstantPool.java b/src/org/jetbrains/java/decompiler/struct/consts/ConstantPool.java
index 0ea6e01..2fd20aa 100644
--- a/src/org/jetbrains/java/decompiler/struct/consts/ConstantPool.java
+++ b/src/org/jetbrains/java/decompiler/struct/consts/ConstantPool.java
@@ -15,6 +15,8 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 @SuppressWarnings("AssignmentToForLoopParameter")
 public class ConstantPool implements NewClassNameBuilder {
@@ -24,6 +26,8 @@ public class ConstantPool implements NewClassNameBuilder {
   private final List<PooledConstant> pool;
   private final PoolInterceptor interceptor;
 
+  private static final Pattern pattern = Pattern.compile("([A-Z]/)+");
+
   public ConstantPool(DataInputStream in) throws IOException {
     int size = in.readUnsignedShort();
     pool = new ArrayList<>(size);
@@ -38,7 +42,17 @@ public class ConstantPool implements NewClassNameBuilder {
 
       switch (tag) {
         case CodeConstants.CONSTANT_Utf8:
-          pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Utf8, in.readUTF()));
+          String value = in.readUTF();
+          Matcher matcher = pattern.matcher(value);
+          if (matcher.find()) {
+            StringBuffer sb = new StringBuffer();
+            do {
+              matcher.appendReplacement(sb, matcher.group().toLowerCase());
+            } while (matcher.find());
+            matcher.appendTail(sb);
+            value = sb.toString();
+          }
+          pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Utf8, value));
           break;
 
         case CodeConstants.CONSTANT_Integer:
